// Set the provider to PostgreSQL using connection URL from .env
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator to use Prisma Client in code
generator client {
  provider = "prisma-client-js"
}

// User table to store core user info (excluding password)
model User {
  id        String   @id @default(uuid()) // Unique ID for the user (auto-generated UUID)
  email     String   @unique // Unique email address for login
  role      Role     @default(ADMIN) // User's role (ADMIN, ORGANIZER, CUSTOMER)
  createdAt DateTime @default(now()) // When the user was created
  updatedAt DateTime @updatedAt // Auto-updates whenever user record is changed

  passwords Password[] // üîó One-to-many relation: user can have multiple passwords
}

// Password table to store hashed passwords and maintain history
model Password {
  id        String   @id @default(uuid()) // Unique ID for each password record
  userId    String // Foreign key to the user this password belongs to
  hash      String // Hashed password (e.g., bcrypt)
  isActive  Boolean  @default(true) // Only one active password at a time per user
  createdAt DateTime @default(now()) // When this password record was created

  // Relation back to User with cascading delete
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // üîó Connects password back to its user
  // üßπ Cascade: when a user is deleted, their passwords are too

  // @@unique([userId, isActive]) // üö´ Enforce only one active password per user
  @@index([userId]) // üîç Index for fast lookups by userId (e.g., during login)
}

// User roles for Role-Based Access Control (RBAC)
enum Role {
  ADMIN
  ORGANIZER
  CUSTOMER
}

/// =========================
/// üèè Cricket Core Models
/// =========================

// ISO country codes (3-letter)
enum CountryCode {
  IND
  AUS
  ENG
  PAK
  SA
  NZ
  SL
  BAN
  WI
  AFG
  ZIM
  IRE
  NAM
  SCO
  NEP
}

// Team classification
enum TeamType {
  INTERNATIONAL
  DOMESTIC
  LEAGUE
}

// Types of series/tournaments
enum SeriesType {
  BILATERAL
  LEAGUE
  KNOCKOUT
  ROUND_ROBIN
}

// Match formats used in series
enum MatchFormat {
  TEST
  ODI
  T20
}

// Permanent player role/skill
enum PlayerRole {
  BATSMAN
  BOWLER
  ALL_ROUNDER
  WICKET_KEEPER
}

enum MatchStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
  ABANDONED
}

enum TossDecision {
  BAT
  BOWL
}

enum ResultType {
  WIN
  LOSS
  DRAW
  TIE
  NO_RESULT
}

// =========================
// üìÅ Main Domain Models
// =========================

model Country {
  id      String  @id @default(uuid()) // Primary Key
  code    String  @unique // ISO Alpha-3 code, e.g. IND, AUS
  name    String
  flagUrl String?

  // Relations
  teams       Team[] // One country can have many teams
  players     Player[] // One country can have many players
  seriesHosts SeriesHostCountry[] // One country can host many series
  venues      Venue[]
}

model Team {
  id        String   @id @default(uuid()) // Primary Key
  name      String
  type      TeamType // INTERNATIONAL, DOMESTIC, LEAGUE
  logoUrl   String?
  countryId String? // Nullable, required only if type=INTERNATIONAL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  country        Country?           @relation(fields: [countryId], references: [id])
  playerTeams    PlayerTeam[] // Players assigned to this team historically
  seriesTeams    SeriesTeam[] // This team participates in many series
  formatTeams    SeriesFormatTeam[] // Teams participating in series formats
  matchesAsTeam1 Match[]            @relation("MatchTeam1")
  matchesAsTeam2 Match[]            @relation("MatchTeam2")
  tossWins       Toss[]             @relation("TossWinningTeam")
  matchSquads    MatchSquad[]
  inningsBatting Innings[]          @relation("InningsBatting")
  inningsBowling Innings[]          @relation("InningsBowling")
  matchResults   MatchResult[]      @relation("WinningTeam")

  @@index([countryId])
}

model Player {
  id           String     @id @default(uuid()) // Primary Key
  fullName     String
  dob          DateTime
  countryId    String // Always required, player's nationality
  battingStyle String?
  bowlingStyle String?
  role         PlayerRole // BATSMAN, BOWLER, etc.
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  country           Country                  @relation(fields: [countryId], references: [id])
  playerTeams       PlayerTeam[] // Teams player has been part of
  formatTeamPlayers SeriesFormatTeamPlayer[] // Player's participation in series formats and teams
  matchSquads       MatchSquad[]
  battingScorecards BattingScorecard[]       @relation("BattingScorecardPlayer")
  bowlingScorecards BowlingScorecard[]
  matchResults      MatchResult[]            @relation("PlayerOfMatch")
  dismissedBatting  BattingScorecard[]       @relation("DismissalBowler")
  dismissedFielding BattingScorecard[]       @relation("DismissalFielder")
}

model PlayerTeam {
  id        String    @id @default(uuid()) // Primary Key
  playerId  String
  teamId    String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())

  // Relations
  player Player @relation(fields: [playerId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@index([playerId])
  @@index([teamId])
}

model Series {
  id          String     @id @default(uuid()) // Primary Key
  name        String
  description String?
  type        SeriesType // BILATERAL, LEAGUE, etc.
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  hosts            SeriesHostCountry[] // Series hosted in multiple countries
  seriesTeams      SeriesTeam[] // Teams participating in this series
  formats          SeriesFormat[] // Match formats included in series (optional)
  matches          Match[]
  battingScorecard BattingScorecard[]
  bowlingScorecard BowlingScorecard[]
}

model SeriesHostCountry {
  id        String @id @default(uuid()) // Primary Key
  seriesId  String
  countryId String

  // Relations
  series  Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  country Country @relation(fields: [countryId], references: [id])

  @@unique([seriesId, countryId]) // Prevent duplicate host assignment
}

model SeriesTeam {
  id       String @id @default(uuid()) // Primary Key
  seriesId String
  teamId   String

  // Relations
  series Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([seriesId, teamId]) // One team per series only once
}

model SeriesFormat {
  id         String      @id @default(uuid())
  seriesId   String
  format     MatchFormat // TEST, ODI, T20
  matchCount Int

  // Relations
  series      Series             @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  formatTeams SeriesFormatTeam[] // Teams playing in this format of the series
  matches     Match[]

  @@unique([seriesId, format]) // Prevent duplicate format entries per series
}

model SeriesFormatTeam {
  id             String   @id @default(uuid())
  seriesFormatId String
  teamId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  seriesFormat      SeriesFormat             @relation(fields: [seriesFormatId], references: [id], onDelete: Cascade)
  team              Team                     @relation(fields: [teamId], references: [id])
  formatTeamPlayers SeriesFormatTeamPlayer[]

  @@unique([seriesFormatId, teamId])
}

model SeriesFormatTeamPlayer {
  id                 String   @id @default(uuid())
  seriesFormatTeamId String // Foreign key referencing SeriesFormatTeam
  playerId           String
  isCaptain          Boolean  @default(false)
  isWicketkeeper     Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  seriesFormatTeam SeriesFormatTeam @relation(fields: [seriesFormatTeamId], references: [id], onDelete: Cascade)
  player           Player           @relation(fields: [playerId], references: [id])

  @@unique([seriesFormatTeamId, playerId]) // Prevent duplicate player entries per team+format
}

// ===========================
// üìç Venue
// ===========================

model Venue {
  id        String   @id @default(uuid())
  name      String
  city      String
  countryId String
  capacity  Int?
  pitchType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  country Country @relation(fields: [countryId], references: [id])
  matches Match[]

  @@index([countryId])
}

// ===========================
// üìç Match: Each game instance
// ===========================

model Match {
  id             String      @id @default(uuid())
  seriesId       String
  seriesFormatId String
  venueId        String
  team1Id        String
  team2Id        String
  matchDate      DateTime
  format         MatchFormat
  status         MatchStatus @default(SCHEDULED)
  matchSummary   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  series            Series             @relation(fields: [seriesId], references: [id])
  seriesFormat      SeriesFormat       @relation(fields: [seriesFormatId], references: [id])
  venue             Venue              @relation(fields: [venueId], references: [id])
  team1             Team               @relation("MatchTeam1", fields: [team1Id], references: [id])
  team2             Team               @relation("MatchTeam2", fields: [team2Id], references: [id])
  toss              Toss?
  squads            MatchSquad[]
  innings           Innings[]
  battingScorecards BattingScorecard[]
  bowlingScorecards BowlingScorecard[]
  matchResult       MatchResult?

  @@index([seriesId, matchDate])
  @@index([venueId, matchDate])
  @@index([team1Id, matchDate])
  @@index([team2Id, matchDate])
}

// ===========================
// üìç Toss: Who won and their decision
// ===========================

model Toss {
  id            String @id @default(uuid())
  matchId       String @unique
  winningTeamId String

  decision  TossDecision
  createdAt DateTime     @default(now())

  // Relations
  match       Match @relation(fields: [matchId], references: [id])
  winningTeam Team  @relation("TossWinningTeam", fields: [winningTeamId], references: [id])
}

// ===========================
// üìç MatchSquad: Playing XI for each match
// ===========================

model MatchSquad {
  id             String   @id @default(uuid())
  matchId        String
  teamId         String
  playerId       String
  isCaptain      Boolean  @default(false)
  isWicketkeeper Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  match  Match  @relation(fields: [matchId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, teamId, playerId])
}

// ===========================
// üìç Innings: Each team's batting innings
// ===========================

model Innings {
  id              String   @id @default(uuid())
  matchId         String
  inningsOrder    Int
  battingTeamId   String
  bowlingTeamId   String
  totalRuns       Int
  wickets         Int
  overs           Float
  extrasByes      Int      @default(0)
  extrasLegByes   Int      @default(0)
  extrasWides     Int      @default(0)
  extrasNoBalls   Int      @default(0)
  extrasPenalty   Int      @default(0)
  declared        Boolean  @default(false)
  inningsDuration Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  match             Match              @relation(fields: [matchId], references: [id])
  battingTeam       Team               @relation("InningsBatting", fields: [battingTeamId], references: [id])
  bowlingTeam       Team               @relation("InningsBowling", fields: [bowlingTeamId], references: [id])
  battingScorecards BattingScorecard[]
  bowlingScorecards BowlingScorecard[]

  @@unique([matchId, inningsOrder])
}

// ===========================
// üìç BattingScorecard: Player batting stats per innings
// ===========================

model BattingScorecard {
  id                 String   @id @default(uuid())
  matchId            String
  seriesId           String
  inningsId          String
  playerId           String
  battingPosition    Int?
  runs               Int
  ballsFaced         Int
  fours              Int
  sixes              Int
  outType            String
  dismissalBowlerId  String?
  dismissalFielderId String?
  dismissalOver      Float?
  createdAt          DateTime @default(now())

  // Relations
  match            Match   @relation(fields: [matchId], references: [id])
  series           Series  @relation(fields: [seriesId], references: [id])
  innings          Innings @relation(fields: [inningsId], references: [id])
  player           Player  @relation("BattingScorecardPlayer", fields: [playerId], references: [id])
  dismissalBowler  Player? @relation("DismissalBowler", fields: [dismissalBowlerId], references: [id])
  dismissalFielder Player? @relation("DismissalFielder", fields: [dismissalFielderId], references: [id])

  @@unique([inningsId, playerId])
  @@index([playerId])
}

// ===========================
// üìç BowlingScorecard: Player bowling stats per innings
// ===========================

model BowlingScorecard {
  id           String   @id @default(uuid())
  matchId      String
  seriesId     String
  inningsId    String
  playerId     String
  overs        Float
  maidens      Int
  runsConceded Int
  wickets      Int
  wides        Int
  noballs      Int
  createdAt    DateTime @default(now())

  // Relations
  match   Match   @relation(fields: [matchId], references: [id])
  series  Series  @relation(fields: [seriesId], references: [id])
  innings Innings @relation(fields: [inningsId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([inningsId, playerId])
  @@index([playerId])
}

// ===========================
// üìç MatchResult: Final result and awards
// ===========================

model MatchResult {
  id              String     @id @default(uuid())
  matchId         String     @unique
  resultType      ResultType
  winningTeamId   String?
  margin          String
  playerOfMatchId String?
  matchHighlights String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  match         Match   @relation(fields: [matchId], references: [id])
  winningTeam   Team?   @relation("WinningTeam", fields: [winningTeamId], references: [id])
  playerOfMatch Player? @relation("PlayerOfMatch", fields: [playerOfMatchId], references: [id])
}
