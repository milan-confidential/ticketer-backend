// Set the provider to PostgreSQL using connection URL from .env
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator to use Prisma Client in code
generator client {
  provider = "prisma-client-js"
}

// User table to store core user info (excluding password)
model User {
  id        String   @id @default(uuid()) // Unique ID for the user (auto-generated UUID)
  email     String   @unique // Unique email address for login
  role      Role     @default(ADMIN) // User's role (ADMIN, ORGANIZER, CUSTOMER)
  createdAt DateTime @default(now()) // When the user was created
  updatedAt DateTime @updatedAt // Auto-updates whenever user record is changed

  passwords Password[] // üîó One-to-many relation: user can have multiple passwords
}

// Password table to store hashed passwords and maintain history
model Password {
  id        String   @id @default(uuid()) // Unique ID for each password record
  userId    String // Foreign key to the user this password belongs to
  hash      String // Hashed password (e.g., bcrypt)
  isActive  Boolean  @default(true) // Only one active password at a time per user
  createdAt DateTime @default(now()) // When this password record was created

  // Relation back to User with cascading delete
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // üîó Connects password back to its user
  // üßπ Cascade: when a user is deleted, their passwords are too

  // @@unique([userId, isActive]) // üö´ Enforce only one active password per user
  @@index([userId]) // üîç Index for fast lookups by userId (e.g., during login)
}

// User roles for Role-Based Access Control (RBAC)
enum Role {
  ADMIN
  ORGANIZER
  CUSTOMER
}

/// =========================
/// üèè Cricket Core Models
/// =========================

// ISO country codes (3-letter)
enum CountryCode {
  IND
  AUS
  ENG
  PAK
  SA
  NZ
  SL
  BAN
  WI
  AFG
  ZIM
  IRE
  NAM
  SCO
  NEP
}

// Team classification
enum TeamType {
  INTERNATIONAL
  DOMESTIC
  LEAGUE
}

// Types of series/tournaments
enum SeriesType {
  BILATERAL
  LEAGUE
  KNOCKOUT
  ROUND_ROBIN
}

// Match formats used in series
enum MatchFormat {
  TEST
  ODI
  T20
}

// Permanent player role/skill
enum PlayerRole {
  BATSMAN
  BOWLER
  ALL_ROUNDER
  WICKET_KEEPER
}

/// =========================
/// üìÅ Main Domain Models
/// =========================

model Country {
  id      String  @id @default(uuid()) // Primary Key
  code    String  @unique // ISO Alpha-3 code, e.g. IND, AUS
  name    String
  flagUrl String?

  // Relations
  teams       Team[] // One country can have many teams
  players     Player[] // One country can have many players
  seriesHosts SeriesHostCountry[] // One country can host many series
}

model Team {
  id        String   @id @default(uuid()) // Primary Key
  name      String
  type      TeamType // INTERNATIONAL, DOMESTIC, LEAGUE
  logoUrl   String?
  countryId String? // Nullable, required only if type=INTERNATIONAL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  country     Country?           @relation(fields: [countryId], references: [id])
  playerTeams PlayerTeam[] // Players assigned to this team historically
  seriesTeams SeriesTeam[] // This team participates in many series
  formatTeams SeriesFormatTeam[] // Teams participating in series formats
}

model Player {
  id           String     @id @default(uuid()) // Primary Key
  fullName     String
  dob          DateTime
  countryId    String // Always required, player's nationality
  battingStyle String?
  bowlingStyle String?
  role         PlayerRole // BATSMAN, BOWLER, etc.
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  country           Country                  @relation(fields: [countryId], references: [id])
  playerTeams       PlayerTeam[] // Teams player has been part of
  formatTeamPlayers SeriesFormatTeamPlayer[] // Player's participation in series formats and teams
}

model PlayerTeam {
  id        String    @id @default(uuid()) // Primary Key
  playerId  String
  teamId    String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())

  // Relations
  player Player @relation(fields: [playerId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@index([playerId])
  @@index([teamId])
}

model Series {
  id          String     @id @default(uuid()) // Primary Key
  name        String
  description String?
  type        SeriesType // BILATERAL, LEAGUE, etc.
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  hosts       SeriesHostCountry[] // Series hosted in multiple countries
  seriesTeams SeriesTeam[] // Teams participating in this series
  formats     SeriesFormat[] // Match formats included in series (optional)
}

model SeriesHostCountry {
  id        String @id @default(uuid()) // Primary Key
  seriesId  String
  countryId String

  // Relations
  series  Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  country Country @relation(fields: [countryId], references: [id])

  @@unique([seriesId, countryId]) // Prevent duplicate host assignment
}

model SeriesTeam {
  id       String @id @default(uuid()) // Primary Key
  seriesId String
  teamId   String

  // Relations
  series Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([seriesId, teamId]) // One team per series only once
}

model SeriesFormat {
  id         String      @id @default(uuid()) // Primary Key
  seriesId   String
  format     MatchFormat // TEST, ODI, T20
  matchCount Int

  // Relations
  series      Series             @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  formatTeams SeriesFormatTeam[] // Teams playing in this format of the series

  @@unique([seriesId, format]) // Prevent duplicate format entries per series
}

model SeriesFormatTeam {
  id             String   @id @default(uuid()) // Primary Key
  seriesFormatId String
  teamId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  seriesFormat      SeriesFormat             @relation(fields: [seriesFormatId], references: [id], onDelete: Cascade)
  team              Team                     @relation(fields: [teamId], references: [id])
  formatTeamPlayers SeriesFormatTeamPlayer[] @relation("TeamPlayers")

  @@unique([seriesFormatId, teamId])
}

model SeriesFormatTeamPlayer {
  id                 String   @id @default(uuid()) // Primary Key
  seriesFormatTeamId String // Foreign key referencing SeriesFormatTeam
  playerId           String
  isCaptain          Boolean  @default(false)
  isWicketkeeper     Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  seriesFormatTeam SeriesFormatTeam @relation(fields: [seriesFormatTeamId], references: [id], name: "TeamPlayers", onDelete: Cascade)
  player           Player           @relation(fields: [playerId], references: [id])

  @@unique([seriesFormatTeamId, playerId]) // Prevent duplicate player entries per team+format
}
